<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>dns__query_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>dns_query.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>tcp__echo__client_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>tcp_echo_client.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>tcp__echo__server_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>tcp_echo_server.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>udp__echo__client_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>udp_echo_client.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max_msg_size</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>udp__echo__client_8cpp.html</Path>
    <Anchor>a02a6e40c3caa0cbb1fc76105c951d265</Anchor>
    <DeclaredIn>udp_echo_client.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>udp__echo__server_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <DeclaredIn>udp_echo_server.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max_msg_size</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>udp__echo__server_8cpp.html</Path>
    <Anchor>a02a6e40c3caa0cbb1fc76105c951d265</Anchor>
    <DeclaredIn>udp_echo_server.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>any</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>ad6fd77e04a5b3840e354cdc246151133</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>any</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>add00a705018fb1f6a7fab0126e1191b5</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broadcast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>ac7360acf633dd0db43bbf23cfbedd19e</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broadcast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>ac3916fdb58d5b7ebf874cf86d034a99b</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>a5d97e7b881566d603d7a83385ca9fd4a</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>aa371dd8511614fd42a3032a47610512a</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::dns</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1dns.html</Path>
    <Anchor>a9865fb931761583f36358e078717e085</Anchor>
    <Abstract>Resolve domain name to one or more IP addresses of &amp;#39;protocol&amp;#39; version. </Abstract>
    <DeclaredIn>dns.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::dns</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1dns.html</Path>
    <Anchor>afdf64879bc984ead15c238b72ed7b8da</Anchor>
    <Abstract>Same as overload with error code but throws std::system_error instead of setting error code...</Abstract>
    <DeclaredIn>dns.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dns_category</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a0864273d3817a92dade962c295b4b365</Anchor>
    <Abstract>Obtain reference to static instance of category for DNS errors. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>ad151ad0440241ff7b35b5be03b3c9438</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a00eec80d2f97def15833e1c16417b6ae</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a90ccdc402708b1c2518e787e5ddf0103</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>system_category</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a02b832e1e1fc489db37c8da3ec24e6d2</Anchor>
    <Abstract>Obtain reference to static instance of category for various network and socket errors. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LIBWIRE_EXCEPTIONS_ENABLED_BOOL</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>memory__view_8hpp.html</Path>
    <Anchor>a6bd42bb279133b82145c9f34ae843c55</Anchor>
    <Abstract>Defines memory_view wrapper. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>non_blocking</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>af7acc3d9cae8b6e61da8cf4bea41d91c</Anchor>
    <Abstract>Toggle non-blocking I/O mode on sockets. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>keep_alive</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a495249a0fbb237b85c4aea524764d7d3</Anchor>
    <Abstract>Enable keep-alive probes on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linger</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a3b1af4895d05e0c59cb92673bcaceea1</Anchor>
    <Abstract>Enable linger on socket.close on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_delay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>adcb1e174ec2434fdabd944ceb377ca86</Anchor>
    <Abstract>Disable the Nagle algorithm on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a7ba455c74ba23393d02adcb6dab85f8b</Anchor>
    <Abstract>Set transmission timeout for TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>todo</Name>
      <APILanguage>unknown</APILanguage>
    </TokenIdentifier>
    <Path>todo.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Abstract>Library namespace, everything in library placed here. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>non_blocking</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>af7acc3d9cae8b6e61da8cf4bea41d91c</Anchor>
    <Abstract>Toggle non-blocking I/O mode on sockets. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>v4</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>aaac2ed5914ee7680ce2a560d4e38f4daa5ed3a3ff8e5c29979502b9030e8518e0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>v6</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>aaac2ed5914ee7680ce2a560d4e38f4daa0af45c99beb7a9afc9192665c4a05cd3</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tcp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a303ea9bf9d0c1b3fa4599e51c10dac60ae20bb202b1d5537b1415e3263a37ed78</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>udp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire.html</Path>
    <Anchor>a303ea9bf9d0c1b3fa4599e51c10dac60a84864c1fe095359bc9c5ac068e24e781</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::address</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Abstract>IPv4/IPv6 address structure. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>ad6e0f4be45cc669d1b720f5ef8d396fc</Anchor>
    <Abstract>Uninitialized address value, is_invalid() = true. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>aed46d843350a66c70b7e18f6a08bf10b</Anchor>
    <Abstract>Construct IP address from raw bytes in network byte order (big endian). </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>ad8a8ab512a46e04fa09a1ae0b7ad7e12</Anchor>
    <Abstract>Construct IPv4 address from 4 bytes in network byte order (big endian). </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>afa7eea4849ff284a66dee5ec8dad73e1</Anchor>
    <Abstract>Construct IPv6 address from 16 bytes in network byte order (big endian). </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>adea1fa4115178df308855bc43710f3fa</Anchor>
    <Abstract>Parse IP address from string. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>is_invalid</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>a2f9cf7db101a83e799d869440aeee8d1</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>adc9ec375cf2fb8e1e68beaa652c70c71</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>a5b3321ad85b0a3a49f2f20a577715c6f</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>to_string</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>acea965d98e50a3667bdb9ea225dcc587</Anchor>
    <Abstract>Convert address object to string representation. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parts</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>aa35a88247785da98c17fd6eff5d2e527</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>version</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>a316ce4d866a74fe1a6a1a8b92afdd4c1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>invalid</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::address</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1address.html</Path>
    <Anchor>afb8a54015425aad6c71020a35ede54b1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::endpoint</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <DeclaredIn>endpoint.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>endpoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <Anchor>a553003bec01e40b71928bf6b285c58be</Anchor>
    <DeclaredIn>endpoint.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>endpoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <Anchor>ada244d29763f3b7bae55513435910ca4</Anchor>
    <Abstract>Parse endpoint information from string representation. </Abstract>
    <DeclaredIn>endpoint.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>is_invalid</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <Anchor>a86d2ea06164225af99d45a1b63592688</Anchor>
    <Abstract>Returns true if endpoint struct have invalid contents because of c-tor failure. </Abstract>
    <DeclaredIn>endpoint.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <Anchor>a9f5085efd349f894a5700ff23b369533</Anchor>
    <DeclaredIn>endpoint.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <Anchor>a92b7adc60d7bcc503ed324354a483656</Anchor>
    <DeclaredIn>endpoint.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>to_string</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <Anchor>aaf6ff1878d451323178dc7be7b3d1935</Anchor>
    <Abstract>Convert endpoint type to string representation. </Abstract>
    <DeclaredIn>endpoint.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <Anchor>a1d1039f149b5ccbbd7cbbe67164198a3</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>port</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <Anchor>a007e52add9d3481de0e448482bfdc0e0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>invalid</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::endpoint</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1endpoint.html</Path>
    <Anchor>aedc163c28fd1f3e56f511b2ceb8e9bc9</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::memory_view</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Abstract>Non-owning STL-like wrapper for raw memory. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>const_iterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a5a15451eecc1e5ceef38e82e0393eea0</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>const_pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a599055d4417fc4744505fd592f1f2663</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>const_reference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a94e575d4a1f70d42c0f3e0edcf9a19cb</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>const_reverse_iterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a92a2b94d42ed2ca65d57cc3147c07c91</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difference_type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a0d2e3ebfdba6c6fefe97e03a109b0597</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>iterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>af9f761a5be02e44ae80beb1395c1d4a9</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pointer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a84653a27d911f2040d6a253e7e1e52f3</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a302f08cc20476554266b7c3912076023</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reverse_iterator</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a349c61c1bd06db6069940541da2e868c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size_type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>aba1a7c574aa90718cf7f867ef7a74316</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value_type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a4a82007b89e4d732cfa2739fa92198ad</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory_view</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a1211080b1052506a39663571eeeff3b3</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memory_view</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>aeb61280034e56164e6649033efa98c7c</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>back</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>ad39359a08534cd305ed9fb5c9a9a0482</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>back</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a48b7948bbb0a81be9ef4e3f8043c0b25</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a37fdcf4efc6e021e59138d3ce71e0ebb</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>begin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>af9001ada939915914683006009e7cdb3</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>capacity</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a3feabcf68f8afd65cd9385e0853d6d10</Anchor>
    <Abstract>Return size of underlying memory size FROM begin() TO BIGGEST POSSIBLE end(). </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cbegin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a11f7ef65e2191bcc39d61f619547c62d</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cend</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a738933ea33951355792958252843bb0d</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a0c84149880e2737df7b979eb69773dcb</Anchor>
    <Abstract>Same as resize (0). </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>afc127f1a212c895d76e80df18869defe</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a50a46ecd652ed34c1579ae549eba142d</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a8e3db93c30c2884ba39a180517069336</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>af3db8e9f5d8ff47616c47df85305a1b8</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>front</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>ab619838366c60e332219aef93020f555</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>front</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a143b0a07e655106844422b9cac18fec6</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max_size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>afae8d72801e84209e17e6bdb1dc84bf2</Anchor>
    <Abstract>Same as capacity. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>af3b025600dbc073ec70ad4815a754806</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a56f264b6362e02a9f9b83c59bfe4eec5</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a466621034fb5ee12f8287b7123ada710</Anchor>
    <Abstract>&amp;quot;Hide&amp;quot; X bytes from end of memory so that new_size is left visible. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shrink_back</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a9b0145f97876a259167e1b75f56e123a</Anchor>
    <Abstract>&amp;quot;Hide&amp;quot; X bytes from end of memory. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shrink_front</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a7bf436180635133c1e2926f89866ca9d</Anchor>
    <Abstract>&amp;quot;Hide&amp;quot; X bytes from begin of memory. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a20ec111ab8a2679e922b48f7c6a6fdc5</Anchor>
    <Abstract>Currently visible memory size. </Abstract>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>swap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::memory_view</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1memory__view.html</Path>
    <Anchor>a5cbe11cb781f7928667471ea7e8554a4</Anchor>
    <DeclaredIn>memory_view.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::non_blocking_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::non_blocking_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1non__blocking__t.html</Path>
    <Abstract>Dummy type for nonblocking option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::non_blocking_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1non__blocking__t.html</Path>
    <Anchor>aa61f9f7a1a540acf1b1d80fa428f791d</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::non_blocking_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1non__blocking__t.html</Path>
    <Anchor>a25e323f9376bd3c3afa9339457b6ade6</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::dns</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::dns</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1dns.html</Path>
    <Abstract>Namespace with functions for interaction with system DNS resolver. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::dns</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1dns.html</Path>
    <Anchor>a9865fb931761583f36358e078717e085</Anchor>
    <Abstract>Resolve domain name to one or more IP addresses of &amp;#39;protocol&amp;#39; version. </Abstract>
    <DeclaredIn>dns.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resolve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::dns</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1dns.html</Path>
    <Anchor>afdf64879bc984ead15c238b72ed7b8da</Anchor>
    <Abstract>Same as overload with error code but throws std::system_error instead of setting error code...</Abstract>
    <DeclaredIn>dns.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::error</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Abstract>Namespace with platform-independent error codes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dns_category</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a0864273d3817a92dade962c295b4b365</Anchor>
    <Abstract>Obtain reference to static instance of category for DNS errors. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>ad151ad0440241ff7b35b5be03b3c9438</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a00eec80d2f97def15833e1c16417b6ae</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>make_error_condition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a90ccdc402708b1c2518e787e5ddf0103</Anchor>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>system_category</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a02b832e1e1fc489db37c8da3ec24e6d2</Anchor>
    <Abstract>Obtain reference to static instance of category for various network and socket errors. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>host_not_found</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a2dfc5d7c9711300330bafb0aca562364aaed2ca7718629fc5c5deadf37963d368</Anchor>
    <Abstract>Requested host doesn&amp;#39;t exists. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>host_not_found_try_again</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a2dfc5d7c9711300330bafb0aca562364aeac0761a9edb259e56d4ff4b7974c4af</Anchor>
    <Abstract>Requested host doesn&amp;#39;t exists, but DNS server answer is non-authoritative. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_address</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a2dfc5d7c9711300330bafb0aca562364a5f4fb670a228d39e258109d67e40f9b7</Anchor>
    <Abstract>Requested host exists, but does not have any addresses defined. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_destination</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a3801d3367d653c60a435b9d67388af2ea5c3deb0b1c9cb1dbd410505ffb039d20</Anchor>
    <Abstract>Failed to connect to destination server. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_resources</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a3801d3367d653c60a435b9d67388af2ea8a6a0beb32b7ed784ce0401ad0e128b6</Anchor>
    <Abstract>Out of resources. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>disconnected</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a3801d3367d653c60a435b9d67388af2ea3a561116f0c9675a3c83d21fa365050d</Anchor>
    <Abstract>Disconnected, either forcibly or gracefully. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>success</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa42ed17f7ac40c7ffb7461f53d688af69</Anchor>
    <Abstract>Operation completed successfully. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unknown</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa70d253c7fe483f97c840ed0b6a94ef28</Anchor>
    <Abstract>Error code not mapped to any other condition. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unexpected</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa3cf03d66d5b6a7d0042e3de34bfa6772</Anchor>
    <Abstract>Error code that should not occur on normal library operation. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>invalid_argument</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa30d20b3b42ec91cbaa2628d0794c4e05</Anchor>
    <Abstract>Invalid argument passed to function. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>permission_denied</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa42e1243d6e0713a253ba41bb090d68a8</Anchor>
    <Abstract>Access to resource disallowed. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operation_not_permitted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa90ab0b8ee5bda1eff5769cfe3611152e</Anchor>
    <Abstract>Operation disallowed. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>try_again</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa28db2922d87597810d695c276d8e06be</Anchor>
    <Abstract>Underlying implementation reported temporary failure -OR- non-blocking operation would block...</Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>in_progress</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aab10fb090f71b7b2b6284388b355e0622</Anchor>
    <Abstract>Non-blocking operation started, but not completed yet. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>already</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa05cec9b4d03893879baac318656d8edd</Anchor>
    <Abstract>Previous non-blocking operation still running. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>interrupted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa9c73661273807ed13b2548b44840a905</Anchor>
    <Abstract>System call interrupted by signal (POSIX-specific). </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>out_of_memory</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa2ff987e1f916168e67d9202204f0e453</Anchor>
    <Abstract>Operating system out of memory. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process_limit_reached</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa79d8cd72ffa0d68cf3151560b079b390</Anchor>
    <Abstract>Per-process limitation reached. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>system_limit_reached</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa08ba0284ef11087b00fdac837605a1e7</Anchor>
    <Abstract>System-wide limitation reached. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>protocol_not_supported</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aae78534180a5c730bd4ab60f44d41f69e</Anchor>
    <Abstract>Requested protocol is not supported. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connection_refused</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa902f29f181607ff33e9d5d8833c3cf76</Anchor>
    <Abstract>Reported by tcp::socket::connect to indicate that no service is listening on specified port...</Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connection_reset</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa6b059215df7fef5d2e12caa4f4650b96</Anchor>
    <Abstract>RST segment received (TCP). </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broken_pipe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa222b125b252060e612f0aee060f77c4e</Anchor>
    <Abstract>Destination finished transmission. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shutdown</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa56d4e5d25d25c01ce279c72b3bd7de8d</Anchor>
    <Abstract>Cannot send after transport endpoint shutdown. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>already_in_use</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa91e5d0b63c3837f75af9a7ceb475ba54</Anchor>
    <Abstract>Reported by listener::bind or listen to indicate that port is already used. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>address_not_available</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aab5b60cf0c4465fe2a61f22523bea3bee</Anchor>
    <Abstract>Reported by listener::bind to indicate that interface with specified address doesn&amp;#39;t exists or not lo...</Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connection_aborted</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aaa6ecf08ddaca64fcb2bb5cc2fe7f35ec</Anchor>
    <Abstract>A connection has been aborted. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>network_unreachable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa5c7ecb2b507e17b9a35364a910913e26</Anchor>
    <Abstract>Network is unreachable. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>host_down</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa02f8f423aaa0ba61b0b89d06b1c23340</Anchor>
    <Abstract>Host is known to be down. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>host_unreachable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa7f162319b776e2b5598cb7e656f3253d</Anchor>
    <Abstract>Host destination is unreachable. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aaf978e687739b83719491d14637bba2a2</Anchor>
    <Abstract>Timed out while trying to perform operation. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>not_connected</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aadedf1b256e41c2bf14c745dc67bbbe80</Anchor>
    <Abstract>Attempt to use not connected socket. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>end_of_file</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>libwire::error</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1error.html</Path>
    <Anchor>a67e895a0422455076608443966da641aa222e5646149af5aed591bf12d18c2287</Anchor>
    <Abstract>Remote side of connection finished transmission. </Abstract>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::ipv4</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Abstract>Namespace with few IPv4 address constants. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>any</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>ad6fd77e04a5b3840e354cdc246151133</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broadcast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>ac7360acf633dd0db43bbf23cfbedd19e</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv4</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv4.html</Path>
    <Anchor>a5d97e7b881566d603d7a83385ca9fd4a</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::ipv6</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Abstract>Namespace with few IPv6 address constants. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>any</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>add00a705018fb1f6a7fab0126e1191b5</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>broadcast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>ac3916fdb58d5b7ebf874cf86d034a99b</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loopback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::ipv6</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1ipv6.html</Path>
    <Anchor>aa371dd8511614fd42a3032a47610512a</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::tcp</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp.html</Path>
    <Abstract>Namespace with classes which expose access to system TCP implementation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::listener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Abstract>Restricted wrapper for TCP listening socket. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a155e107bf81fc961de6697e9411bb635</Anchor>
    <Abstract>Construct listener object. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a505015b3c69e1458662a71ae3ac9eae8</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a7b991538661265ea25ded732ad7c0411</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>aa517b68e52119a1ed7b6debfc928dfbc</Anchor>
    <Abstract>Construct listener and start accepting connections. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>afe91a2c67d3a07e80cc1bddb6dfa7eda</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~listener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a8d606ec08a12698dbebc17d495d84f79</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>accept</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a32c501d7a07b3db7045315bd695b8039</Anchor>
    <Abstract>Accept first connection from listener queue and create socket for it. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a4e8e98cf863cd5d0bdfef8862b04b92e</Anchor>
    <Abstract>Start listening for incoming connections on specified endpoint. </Abstract>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>a18061ee2f5baa03872bf3830489a2888</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::listener</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1listener.html</Path>
    <Anchor>ae2fb88c492bdc7019733d0926c05f73f</Anchor>
    <DeclaredIn>listener.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::socket</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Abstract>Descriptor wrapper for TCP socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>ae115000f7aae5fd19b61b5113e81b730</Anchor>
    <Abstract>Create new socket object. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>aa725c1065f975c9377d1c4b70233c0e1</Anchor>
    <Abstract>Initialize socket from underlying raw handle. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a0a10dc4eb4058263712ae52f0107c9cc</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a367c74544310a82c0adb7b8ec07f6d8d</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a77f2e9c22570fe06775f2ce5c0ef6b06</Anchor>
    <Abstract>Shutdown and then close socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a745c222d189b27e9b6a8b2bd18124012</Anchor>
    <Abstract>Close and destroy underlying socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>connect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a3a87ebed748618f2cf476d1d267cac3a</Anchor>
    <Abstract>Initialize underlying socket and connect to remote endpoint. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>is_open</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a592f509cdf417b83ce18b31c43651e76</Anchor>
    <Abstract>Check whether underlying socket is open. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>native_handle</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a0be0e4db838d6633bc93dab6ff942573</Anchor>
    <Abstract>Get native handle/descriptor for socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a4af41e8b31b00b5d6e6e6cc2ff0b292b</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>aa4556ca3b6228498173673d0f7accb75</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shutdown</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a8f0cd2e9bfc6a1956e139b4f07da3a34</Anchor>
    <Abstract>Shutdown reading/writing part of full-duplex connection (or both if read and write is true)...</Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a98f18a8743e96d417dfa8758c5d82bff</Anchor>
    <Abstract>Query socket option value specified by type tag Option. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>ac73be02513cff09fe1c42edbac951890</Anchor>
    <Abstract>Set socket option value specified by type tag Option to value value. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>local_endpoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>aa8843794b50ad284d97e9c93441dde5d</Anchor>
    <Abstract>Get address and port of local end of connection. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remote_endpoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a2de2812c0ceeb783d117a91a2b39aa7a</Anchor>
    <Abstract>Get address and port of remote end of connection. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a414e460baf9a50d1fc9ebbb189e9f6a6</Anchor>
    <Abstract>Read up to bytes_count bytes from socket into buffer passed by reference. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a6e9a8a0cc7b2ef74f96aa89e98474903</Anchor>
    <Abstract>Same as overload with Buffer argument but return newly allocated buffer every time. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read_until</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>ad1d0647f964691b35fdda13f77591f43</Anchor>
    <Abstract>Read from socket until until gives byte is found or max_size bytes read. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read_until</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a26bc5e5542e1bd2a4177047d1b9cc6d3</Anchor>
    <Abstract>Same as overload with buffer argument but returns newly allocated buffer every time. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::tcp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1tcp_1_1socket.html</Path>
    <Anchor>a044712f5b453a5ce7f3aa6e84c3260db</Anchor>
    <Abstract>Write contents of buffer to socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Abstract>Inline namespace with options applicable for TCP sockets. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>keep_alive</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a495249a0fbb237b85c4aea524764d7d3</Anchor>
    <Abstract>Enable keep-alive probes on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linger</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a3b1af4895d05e0c59cb92673bcaceea1</Anchor>
    <Abstract>Enable linger on socket.close on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>no_delay</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>adcb1e174ec2434fdabd944ceb377ca86</Anchor>
    <Abstract>Disable the Nagle algorithm on TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>libwire::tcp::options</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1tcp_1_1options.html</Path>
    <Anchor>a7ba455c74ba23393d02adcb6dab85f8b</Anchor>
    <Abstract>Set transmission timeout for TCP socket. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options::keep_alive_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::options::keep_alive_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1keep__alive__t.html</Path>
    <Abstract>Dummy type for keep_alive option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::keep_alive_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1keep__alive__t.html</Path>
    <Anchor>ab26d606f079006483b3a4eafeb0b31f5</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::keep_alive_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1keep__alive__t.html</Path>
    <Anchor>a08e95183f4a0bb4a88a77fec1197e96b</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options::linger_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::options::linger_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1linger__t.html</Path>
    <Abstract>Dummy type for linger option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::linger_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1linger__t.html</Path>
    <Anchor>a0e0dd7371da3ffac865941e9d9f9a8ac</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::linger_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1linger__t.html</Path>
    <Anchor>af903847313990e79643d5594a8ae2b6d</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options::no_delay_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::options::no_delay_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1no__delay__t.html</Path>
    <Abstract>Dummy type for no_delay option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::no_delay_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1no__delay__t.html</Path>
    <Anchor>a4f2612c22a3968f5906cc12a11e472e5</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::no_delay_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1no__delay__t.html</Path>
    <Anchor>a5a51e611f4de2e0be3dc371724852722</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::tcp::options::timeout_t</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::tcp::options::timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1timeout__t.html</Path>
    <Abstract>Dummy type for timeout option. </Abstract>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1timeout__t.html</Path>
    <Anchor>a720697bb2bfb38efdc960f57e620e714</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>libwire::tcp::options::timeout_t</Scope>
    </TokenIdentifier>
    <Path>structlibwire_1_1tcp_1_1options_1_1timeout__t.html</Path>
    <Anchor>a096f6c72718f18dcf23cdeb272b678ff</Anchor>
    <DeclaredIn>options.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::udp</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>libwire::udp</Scope>
    </TokenIdentifier>
    <Path>namespacelibwire_1_1udp.html</Path>
    <Abstract>Namespace with classes which expose access to system UDP implementation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>libwire::udp::socket</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Abstract>Descriptor wrapper for UDP socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a530f3dffdcc6207c127eeb8c132d840f</Anchor>
    <Abstract>Create new socket object. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a2a649cbda3b0cdd2415a220394db40a9</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>ae55cc2d96c825b84bd0b89d24c3282e4</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~socket</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a23045bf20a8a6db915eb7356572fc95c</Anchor>
    <Abstract>Deallocate socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>associate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a82ba9de4dc8afe819639895d54cb10e7</Anchor>
    <Abstract>Associate UDP socket with remote endpoint. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a918ff6bfb7f4255beee808b709d1cb08</Anchor>
    <Abstract>Deallocate socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>disassociate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>af452499c121c508677c97e5664e344df</Anchor>
    <Abstract>Undo previous call to associate(). </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>implementation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a86dd329f7aac7d806287341a3b576813</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>implementation</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a9705f28e0b7a3e21730008c196eb7482</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>listen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a87efdf04d3ef17e51d583317fe254581</Anchor>
    <Abstract>Accept datagrams coming on specified endpoint. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>native_handle</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>aa20cd2002a968f2c7bb33640e3307352</Anchor>
    <Abstract>Get native handle/descriptor for socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>adc21fb1c84acdcf5329bd2008aca1787</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>a84211e9dc5f8d89f2f4b7c560016f39a</Anchor>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>ae2f281a8a5debd56dcf6f2cea688adc4</Anchor>
    <Abstract>Query socket option value specified by type tag Option. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>set_option</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>ace2847df5092646e9d4154c6758bd629</Anchor>
    <Abstract>Set socket option value specified by type tag Option to value value. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>ad53276961f2c70e1d0dfad8b0c9cd5b1</Anchor>
    <Abstract>Read pending datagram into buffer. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>aa6c70c4f0f36184fa4bbbc09092a0f4b</Anchor>
    <Abstract>Same as overload with Buffer argument but return newly allocated buffer every time. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>libwire::udp::socket</Scope>
    </TokenIdentifier>
    <Path>classlibwire_1_1udp_1_1socket.html</Path>
    <Anchor>aaa6b647c6da463615ee56522d2f14223</Anchor>
    <Abstract>Write contents of buffer to socket. </Abstract>
    <DeclaredIn>socket.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::hash&lt; libwire::address &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::hash&lt; libwire::address &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01libwire_1_1address_01_4.html</Path>
    <Abstract>Hash implementation for address. </Abstract>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>std::hash&lt; libwire::address &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1hash_3_01libwire_1_1address_01_4.html</Path>
    <Anchor>a3ae71c616cd2734133cffb88450ae03e</Anchor>
    <DeclaredIn>address.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::is_error_condition_enum&lt; libwire::error::dns_condition &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::is_error_condition_enum&lt; libwire::error::dns_condition &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1is__error__condition__enum_3_01libwire_1_1error_1_1dns__condition_01_4.html</Path>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::is_error_condition_enum&lt; libwire::error::generic &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::is_error_condition_enum&lt; libwire::error::generic &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1is__error__condition__enum_3_01libwire_1_1error_1_1generic_01_4.html</Path>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>std::is_error_condition_enum&lt; libwire::error::system_condition &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>std::is_error_condition_enum&lt; libwire::error::system_condition &gt;</Scope>
    </TokenIdentifier>
    <Path>structstd_1_1is__error__condition__enum_3_01libwire_1_1error_1_1system__condition_01_4.html</Path>
    <DeclaredIn>error.hpp</DeclaredIn>
  </Token>
</Tokens>
